{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 Times-Italic;\f2\froman\fcharset0 Times-Bold;
\f3\fmodern\fcharset0 Courier;\f4\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat14\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat18\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat22\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls1\ilvl0
\f0\fs26\fsmilli13333 \cf2 {\listtext	1.	}\expnd0\expndtw0\kerning0
What is the difference between a 
\f1\i character 
\f0\i0 and a 
\f1\i string? 
\f0\i0 \uc0\u8232 character represents a single digit, letter or punctuation, whether a string is multiple characters combined.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
True or false: If you execute the lines \uc0\u8232 
\f2\b\fs24            string line;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
           cin >> line;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f3\b0\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f0 the program will read an entire line of data from the user and store it in the variable 
\f2\b\fs24 line
\f0\b0\fs26\fsmilli13333 . \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
FALSE\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
Which arguments to the 
\f2\b\fs24 getline 
\f0\b0\fs26\fsmilli13333 function are passed by reference? \uc0\u8232 An entire string\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
What is the difference between a 
\f1\i method 
\f0\i0 and a 
\f1\i free function? 
\f0\i0 \uc0\u8232 method applies to object classes and free function to functions\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
True or false: In C++, you can determine the length of the string stored in the variable 
\f2\b\fs24 str 
\f0\b0\fs26\fsmilli13333 by calling 
\f2\b\fs24 length(str)
\f0\b0\fs26\fsmilli13333 . \uc0\u8232 FALSE\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	10.	}\expnd0\expndtw0\kerning0
If you call 
\f2\b\fs24 s1.replace(0, 1, s2)
\f0\b0\fs26\fsmilli13333 , which string is the 
\f1\i receiver
\f0\i0 ? \uc0\u8232 s1\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	11.	}\expnd0\expndtw0\kerning0
What is the effect of the 
\f2\b\fs24 + 
\f0\b0\fs26\fsmilli13333 operator when it is used with two string operands? \uc0\u8232 it concatenates both strings\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	12.	}\expnd0\expndtw0\kerning0
When C++ evaluates the expression 
\f2\b\fs24 s1 < s2
\f0\b0\fs26\fsmilli13333 , what rule does the 
\f2\b\fs24 string 
\f0\b0\fs26\fsmilli13333 class use to compare the string values? \uc0\u8232 the underlying character codes\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	13.	}\expnd0\expndtw0\kerning0
What two syntactic forms does this chapter describe for selecting an individual character from a string? How do these two syntactic forms differ in their implementation? \uc0\u8232 str[0] str.at(0) first one can alter the content of the type\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	14.	}\expnd0\expndtw0\kerning0
When you select an individual character from a C++ string, you can use either the 
\f2\b\fs24 at 
\f0\b0\fs26\fsmilli13333 method or the standard subscript notation using square brackets. From the client\'92s perspective, what is the difference between these two options? \uc0\u8232 second one can alter the content of the type\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	15.	}\expnd0\expndtw0\kerning0
True or false: If you assign the value of the string variable 
\f2\b\fs24 s1 
\f0\b0\fs26\fsmilli13333 to the string variable 
\f2\b\fs24 s2
\f0\b0\fs26\fsmilli13333 , the 
\f2\b\fs24 string 
\f0\b0\fs26\fsmilli13333 class copies the characters so that subsequent changes to the characters in one string will not affect the characters in the other. \uc0\u8232 True\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	16.	}\expnd0\expndtw0\kerning0
True or false: The index positions in a string begin at 0 and extend up to the length of the string minus 1. \uc0\u8232 TRUE\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	17.	}\expnd0\expndtw0\kerning0
What are the arguments to the 
\f2\b\fs24 substr 
\f0\b0\fs26\fsmilli13333 method? What happens if you omit the second argument? \uc0\u8232 pos - position to begin extracting and n - number of characters to include in the new string\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	14.	}\expnd0\expndtw0\kerning0
What value does the 
\f2\b\fs24 find 
\f0\b0\fs26\fsmilli13333 method return to indicate that the search string does not appear? \
\ls2\ilvl0\kerning1\expnd0\expndtw0 -1\expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	16.	}\expnd0\expndtw0\kerning0
What are the arguments to the 
\f2\b\fs24 substr 
\f0\b0\fs26\fsmilli13333 method? What happens if you omit the second argument? \uc0\u8232 pos - position to begin extracting and n - number of characters to include in the new string\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	17.	}\expnd0\expndtw0\kerning0
What is the significance of the optional second argument to the 
\f2\b\fs24 find 
\f0\b0\fs26\fsmilli13333 method? \uc0\u8232 position where to start looking\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	18.	}\expnd0\expndtw0\kerning0
What is the effect of each of the following calls to the 
\f2\b\fs24 <string> 
\f0\b0\fs26\fsmilli13333 library: \uc0\u8232 
\f2\b\fs24 string s = "ABCDE"\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa266\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 	\expnd0\expndtw0\kerning0
string t = "";\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf2 a. 
\f2\b\fs24 s.length() 5\

\f0\b0\fs26\fsmilli13333 b. 
\f2\b\fs24 t.length() 0\

\f0\b0\fs26\fsmilli13333 c. 
\f2\b\fs24 s[2] B\uc0\u8232 
\f0\b0\fs26\fsmilli13333 d. 
\f2\b\fs24 s + t ABCDE
\f4\b0 \

\f0\fs26\fsmilli13333 e. 
\f2\b\fs24 t += 'a' a\

\f0\b0\fs26\fsmilli13333 f. 
\f2\b\fs24 s.replace(0, 2, "Z") ZZCDE\

\f0\b0\fs26\fsmilli13333 g. 
\f2\b\fs24 s.substr(0, 3) ABC\uc0\u8232 
\f0\b0\fs26\fsmilli13333 h. 
\f2\b\fs24 s.substr(4) D\uc0\u8232 
\f0\b0\fs26\fsmilli13333 i. 
\f2\b\fs24 s.substr(3, 9) DE
\f4\b0 \

\f0\fs26\fsmilli13333 j. 
\f2\b\fs24 s.substr(3, 3) DE
\f4\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls3\ilvl0
\f0\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 {\listtext	18.	}\expnd0\expndtw0\kerning0
What is the pattern for iterating through each character in a string? \uc0\u8232 for (int i = o; i < str.lenght(); i++) \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	19.	}\expnd0\expndtw0\kerning0
How does this pattern change if you want to iterate through the characters in \uc0\u8232 reverse order, starting with the last character and ending with the first? \u8232 for (int i = str.lenght(); i > 0); I\'97) \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	20.	}\expnd0\expndtw0\kerning0
What is the pattern for growing a string through concatenation? \uc0\u8232 str = string(\'93text1\'94) + \'93text2\'94;\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	21.	}\expnd0\expndtw0\kerning0
What is the result of each of the following calls to the 
\f2\b\fs24 <cctype> 
\f0\b0\fs26\fsmilli13333 library: \uc0\u8232 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 a. 
\f2\b\fs24 isdigit(7) true\
 
\f0\b0\fs26\fsmilli13333 b. 
\f2\b\fs24 isdigit('7') true\
 
\f0\b0\fs26\fsmilli13333 c. 
\f2\b\fs24 isalnum(7) true\

\f0\b0\fs26\fsmilli13333 d. 
\f2\b\fs24 toupper(7) 7\

\f0\b0\fs26\fsmilli13333 e. 
\f2\b\fs24 toupper('A') A\

\f0\b0\fs26\fsmilli13333 f. 
\f2\b\fs24 tolower('A') a
\f4\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls4\ilvl0
\f0\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 {\listtext	22.	}\expnd0\expndtw0\kerning0
Why does C++ support both a 
\f2\b\fs24 string 
\f0\b0\fs26\fsmilli13333 class and a more primitive string type? \uc0\u8232 C++ was Initially intended for programmers familiar with C language which only has primitive string type, thus C++ was made compatible with the primitive type to onboard those programmers.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	23.	}\expnd0\expndtw0\kerning0
How can you convert a primitive string value to a C++ string? How can you \uc0\u8232 specify a conversion in the opposite direction? \u8232 str.c_str() from C++ to C.\
\pard\pardeftab720\sa240\partightenfactor0

\f4\fs24 \cf2 	string(\'93str\'94) from C to C++\
\pard\tx720\pardeftab720\sa266\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \
}