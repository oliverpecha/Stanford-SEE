{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 Times-Italic;\f2\froman\fcharset0 Times-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat17\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww14820\viewh16380\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls1\ilvl0
\f0\fs26\fsmilli13333 \cf2 {\listtext	1.	}\expnd0\expndtw0\kerning0
Define each of the following terms: 
\f1\i object, structure, class, instance variable, method
\f0\i0 . \uc0\u8232 OBJECT: A product that is defined under the characteristics and functions of  defined by a class \
{\listtext	2.	}STRUCTURE: Original C Style form for integrating several variables under a single object		\
{\listtext	3.	}CLASS: the blueprint or set of rules and behaviors that an object is created from\
{\listtext	4.	}INSTANCE VARIABLE: value under an object\
{\listtext	5.	}METHOD: a gateway to modify data or communicate with an object\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
In a C++ class definition, what do the keywords 
\f2\b\fs24 public 
\f0\b0\fs26\fsmilli13333 and 
\f2\b\fs24 private 
\f0\b0\fs26\fsmilli13333 mean? \uc0\u8232 public: accesible by other functions, methods outside of the object. Private: only accesible by functions inside the object\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
True or false: In C++, the only difference between the keyword 
\f2\b\fs24 struct 
\f0\b0\fs26\fsmilli13333 and \uc0\u8232 the keyword 
\f2\b\fs24 class 
\f0\b0\fs26\fsmilli13333 is that 
\f2\b\fs24 struct 
\f0\b0\fs26\fsmilli13333 makes fields public by default. \uc0\u8232 false\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
What operator does C++ use to select an instance variable from an object? \uc0\u8232 .\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	10.	}\expnd0\expndtw0\kerning0
What is the syntax for a C++ constructor? \uc0\u8232 NameOfClass ::NameOfClass() \{ \}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	11.	}\expnd0\expndtw0\kerning0
How many arguments are passed to the 
\f1\i default constructor. 
\f0\i0 \uc0\u8232 none\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	12.	}\expnd0\expndtw0\kerning0
What are 
\f1\i getters 
\f0\i0 and 
\f1\i setters? 
\f0\i0 \uc0\u8232 methods that interface between client and implementation to get (getters) or set (setters) value of variables.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	13.	}\expnd0\expndtw0\kerning0
What does it mean for a class to be 
\f1\i immutable? 
\f0\i0 \uc0\u8232 the value of variable can not me modified after object is constructed \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	14.	}\expnd0\expndtw0\kerning0
When you separate the interface and implementation of a class, how does the implementation let the compiler know to which class a particular method definition belongs? \uc0\u8232 using double colon ::\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	15.	}\expnd0\expndtw0\kerning0
What strategy is used in the 
\f2\b\fs24 .h 
\f0\b0\fs26\fsmilli13333 files in this chapter to prevent clients from seeing the contents of the private section? \uc0\u8232 To ignore them.The prototype for the private method, however, must appear as part of the private section of the class. That prototype must therefore be part of the rational.h file, even though clients cannot call it. If you are using a class only as a client, it makes sense to ignore the contents of the private section of a class, even though C++ requires that the private section be included in the interface. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	16.	}\expnd0\expndtw0\kerning0
In C++, what method name would you use to overload the 
\f2\b\fs24 % 
\f0\b0\fs26\fsmilli13333 operator. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	17.	}\expnd0\expndtw0\kerning0
How does C++ differentiate between the prefix and suffix versions of the 
\f2\b\fs24 ++ 
\f0\b0\fs26\fsmilli13333 \uc0\u8232 and 
\f2\b\fs24 -- 
\f0\b0\fs26\fsmilli13333 operators? \uc0\u8232 in the prefix, the value is incremented and then passed as value, in suffix, the value is passed and then incremented\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	18.	}\expnd0\expndtw0\kerning0
Why does the overloaded implementation of the 
\f2\b\fs24 << 
\f0\b0\fs26\fsmilli13333 operator require the use of \uc0\u8232 return by reference? \u8232 Because streams can not be copied\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	19.	}\expnd0\expndtw0\kerning0
True or false: Return by reference is used as frequently in C++ programs as call by reference. \uc0\u8232 false\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	20.	}\expnd0\expndtw0\kerning0
Describe the differences between the method-based and free-function-based approaches to overloading the operators for a class. What are the advantages and disadvantages of each style? \uc0\u8232 method based is hard to read but doesn\'92t require intervention. Free-function needs to be manually added but increases readability\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	21.	}\expnd0\expndtw0\kerning0
What does it mean for one class to declare a method or another class as a friend? \uc0\u8232 to give the privilege of accessing private variables\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	17.	}\expnd0\expndtw0\kerning0
What reason does this chapter offer for overloading the 
\f2\b\fs24 ++ 
\f0\b0\fs26\fsmilli13333 operator for the 
\f2\b\fs24 Direction 
\f0\b0\fs26\fsmilli13333 type? \uc0\u8232 ++ operator doesn\'92t work with Ennumerated types \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	18.	}\expnd0\expndtw0\kerning0
What are the five steps suggested in this chapter as a guideline for designing a class? \uc0\u8232 1. Think about clients needs 2. What pats need to be exposed and not 3. Set of constructors 4. Easy to test\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	19.	}\expnd0\expndtw0\kerning0
1)Think generally about how clients are likely to use the class. 2) Determine what information belongs in the private state of each object. 3) Define a set of constructors to create new objects. 4) Enumerate the operations that will become the public methods of the class. 5) Code and test the implementation. \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	20.	}\expnd0\expndtw0\kerning0
What is a 
\f1\i rational number? 
\f0\i0 \uc0\u8232 the result of a division between two integers. Book: which are those numbers that can be represented as the quotient of two integers.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	21.	}\expnd0\expndtw0\kerning0
What restrictions does the 
\f2\b\fs24 Rational 
\f0\b0\fs26\fsmilli13333 constructor place on the values of the \uc0\u8232 
\f2\b\fs24 num 
\f0\b0\fs26\fsmilli13333 and 
\f2\b\fs24 den 
\f0\b0\fs26\fsmilli13333 variables? \uc0\u8232 c) negative values. b)Using GCD - great common divisor to find the smallest integers that return the same result. C) rational numbers that return 0 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	22.	}\expnd0\expndtw0\kerning0
The code for the 
\f2\b\fs24 Rational 
\f0\b0\fs26\fsmilli13333 constructor on page 290 includes an explicit check to see whether 
\f2\b\fs24 x 
\f0\b0\fs26\fsmilli13333 is zero? Would the 
\f2\b\fs24 Rational 
\f0\b0\fs26\fsmilli13333 class still work the same way if this check were eliminated? \uc0\u8232 no\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	23.	}\expnd0\expndtw0\kerning0
In the 
\f2\b\fs24 rational.h 
\f0\b0\fs26\fsmilli13333 file in Figure 6-7, why is it necessary to designate the operator methods for 
\f2\b\fs24 +
\f0\b0\fs26\fsmilli13333 , 
\f2\b\fs24 -
\f0\b0\fs26\fsmilli13333 , 
\f2\b\fs24 *
\f0\b0\fs26\fsmilli13333 , and 
\f2\b\fs24 / 
\f0\b0\fs26\fsmilli13333 as friends but not the operator method for the 
\f2\b\fs24 << 
\f0\b0\fs26\fsmilli13333 insertion operator. \uc0\u8232 << doesn\'92t need to modify internal values\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	24.	}\expnd0\expndtw0\kerning0
What is a 
\f1\i token? 
\f0\i0 \uc0\u8232 a set of characters that result in a word\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	25.	}\expnd0\expndtw0\kerning0
What is the standard pattern for reading all tokens from a string? \uc0\u8232 separate punctuation characters from alphanumeric and ignore spaces\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	26.	}\expnd0\expndtw0\kerning0
How do you initialize a 
\f2\b\fs24 TokenScanner 
\f0\b0\fs26\fsmilli13333 object so that it ignores spaces, tabs, and other whitespace characters in the input? \uc0\u8232 ignoreWhiteSpaces();\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	27.	}\expnd0\expndtw0\kerning0
In your own words, explain the technique of embedding a program in a class. \uc0\u8232 to facilitate recycling of the same functions and improve readability, you increase complexity of the code\
\pard\tx720\pardeftab720\sa266\partightenfactor0
\cf2 Classes, however, can still be useful even if you never intend to have more than one object of a particular class. For example, it often makes sense to write a program as a class rather than as a collection of free functions. The primary advantage of doing so is that classes provide better encapsulation. The fact that access to any private data is limited to the class itself means that it is much safer to use private instance variables to share information than it is to use global variables, which offer no such security.\
}