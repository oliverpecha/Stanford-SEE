{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Italic;
\f3\ftech\fcharset77 Symbol;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat18\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat18\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww15660\viewh15580\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls1\ilvl0
\f0\fs26\fsmilli13333 \cf2 {\listtext	1.	}\expnd0\expndtw0\kerning0
True or false: An abstract data type is one defined in terms of its behavior rather than its representation. \uc0\u8232 TRUE\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
What three advantages does this chapter cite for separating the behavior of a class from its underlying implementation? \uc0\u8232 simplicity, flexibility, and security.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
What is the STL? \uc0\u8232 Standard Template Library\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
If you want to use the 
\f1\b\fs24 Vector 
\f0\b0\fs26\fsmilli13333 class in a program, what 
\f1\b\fs24 #include 
\f0\b0\fs26\fsmilli13333 line do you need to add to the beginning of your code? \uc0\u8232 \'93vector.h\'94\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
List at least three advantages of the 
\f1\b\fs24 Vector 
\f0\b0\fs26\fsmilli13333 class over the more primitive array mechanism available in C++. \uc0\u8232 can add new values, also in between the array, is able to check when the search index is beyond the size of it\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
What is meant by the term 
\f2\i bounds-checking? 
\f0\i0 \uc0\u8232 check when the search index is beyond the size of it\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
What is a 
\f2\i parameterized type? 
\f0\i0 \uc0\u8232 A Class that includes  a base-type specification (eg: Vector<int>, Vector<char>, and Vector<string> )\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
What type name would you use to store a vector of Boolean values? \uc0\u8232 Vector<bool>\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
True or false: The default constructor for the 
\f1\b\fs24 Vector 
\f0\b0\fs26\fsmilli13333 class creates a vector with ten elements, although you can make it longer later. \uc0\u8232 FALSE\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	10.	}\expnd0\expndtw0\kerning0
How would you initialize a 
\f1\b\fs24 Vector<int> 
\f0\b0\fs26\fsmilli13333 with 20 elements, all equal to 0? \uc0\u8232 Vector<int> example = \{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	11.	}\expnd0\expndtw0\kerning0
What method do you call to determine the number of elements in a 
\f1\b\fs24 Vector
\f0\b0\fs26\fsmilli13333 ? \uc0\u8232 example.size();\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	12.	}\expnd0\expndtw0\kerning0
If a 
\f1\b\fs24 Vector 
\f0\b0\fs26\fsmilli13333 object has 
\f2\i N 
\f0\i0 elements, what is the legal range of values for the first argument to 
\f1\b\fs24 insertAt
\f0\b0\fs26\fsmilli13333 ? What about for the argument to 
\f1\b\fs24 removeAt
\f0\b0\fs26\fsmilli13333 ? \uc0\u8232 insertAt 0 to N-1 removeAt 1 to N-1\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	13.	}\expnd0\expndtw0\kerning0
What feature of the 
\f1\b\fs24 Vector 
\f0\b0\fs26\fsmilli13333 class makes it possible to avoid explicit use of the 
\f1\b\fs24 get 
\f0\b0\fs26\fsmilli13333 and 
\f1\b\fs24 set 
\f0\b0\fs26\fsmilli13333 methods? \uc0\u8232 overridden []\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	14.	}\expnd0\expndtw0\kerning0
Why is it important to pass vectors and other collection object by reference? \uc0\u8232 makes it possible to write functions that change the contents of a vector. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	15.	}\expnd0\expndtw0\kerning0
What declaration would you use to initialize a variable called 
\f1\b\fs24 chessboard 
\f0\b0\fs26\fsmilli13333 to \uc0\u8232 an 8
\f3 !
\f0 8 grid, each of whose elements is a character? \uc0\u8232 Vector< Vector<Char> > chessboard (8, Vector 8); \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	16.	}\expnd0\expndtw0\kerning0
Given the 
\f1\b\fs24 chessboard 
\f0\b0\fs26\fsmilli13333 variable from the preceding exercise, how would you assign the character 
\f1\b\fs24 'R' 
\f0\b0\fs26\fsmilli13333 (which stands for a white rook in standard chess notation) to the squares in the lower left and lower right corners of the board? \uc0\u8232 chessboard.set(8, 0, \'91R\'92); chessboard.set(8, 7, \'91R\'92);\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	17.	}\expnd0\expndtw0\kerning0
What do the acronyms 
\f2\i LIFO 
\f0\i0 and 
\f2\i FIFO 
\f0\i0 stand for? How do these terms apply to stacks and queues? \uc0\u8232 Last In, First Out. First In, Last Out.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	18.	}\expnd0\expndtw0\kerning0
What are the names of the two fundamental operations for a stack? \uc0\u8232 push and pop\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	19.	}\expnd0\expndtw0\kerning0
What are the names for the corresponding operations for a queue? \uc0\u8232 enque, deque\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	20.	}\expnd0\expndtw0\kerning0
What does the 
\f1\b\fs24 peek 
\f0\b0\fs26\fsmilli13333 operation do in each of the 
\f1\b\fs24 Stack 
\f0\b0\fs26\fsmilli13333 and 
\f1\b\fs24 Queue 
\f0\b0\fs26\fsmilli13333 classes? \uc0\u8232 return the value of the position without altering it\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	21.	}\expnd0\expndtw0\kerning0
Describe in your own words what is meant by the term 
\f2\i discrete time 
\f0\i0 in the context of a simulation program. \uc0\u8232 a time unit that you can treat as indivisible. In general, and that the probability of more than one event occurring during a single time unit is negligible.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	22.	}\expnd0\expndtw0\kerning0
What are the two type parameters used with the 
\f1\b\fs24 Map 
\f0\b0\fs26\fsmilli13333 class. \uc0\u8232 key and value\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	23.	}\expnd0\expndtw0\kerning0
What happens if you call 
\f1\b\fs24 get 
\f0\b0\fs26\fsmilli13333 for a key that doesn\'92t exist in a map? \uc0\u8232 you get the default value of the data type\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	24.	}\expnd0\expndtw0\kerning0
What are the syntactic shorthand forms for 
\f1\b\fs24 get 
\f0\b0\fs26\fsmilli13333 and 
\f1\b\fs24 put 
\f0\b0\fs26\fsmilli13333 that allow you to treat maps as associative arrays? \uc0\u8232 map[key] = value;\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	25.	}\expnd0\expndtw0\kerning0
Why do the Stanford libraries include a separate 
\f1\b\fs24 Lexicon 
\f0\b0\fs26\fsmilli13333 class even though it is easy to implement a lexicon using the 
\f1\b\fs24 Set 
\f0\b0\fs26\fsmilli13333 class? \uc0\u8232 Because it includes thousands of predefined English words\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	26.	}\expnd0\expndtw0\kerning0
What are the two kinds of data files supported by the constructor for the 
\f1\b\fs24 Lexicon 
\f0\b0\fs26\fsmilli13333 class? \uc0\u8232 strings and files (or characters)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	27.	}\expnd0\expndtw0\kerning0
What is the general form of the range-based 
\f1\b\fs24 for 
\f0\b0\fs26\fsmilli13333 loop pattern? \uc0\u8232 for ( type variable :  collection ) - for each type x in y\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	28.	}\expnd0\expndtw0\kerning0
What reason does the chapter offer for disallowing the use of the range-based \uc0\u8232 
\f1\b\fs24 for 
\f0\b0\fs26\fsmilli13333 loop with the 
\f1\b\fs24 Stack 
\f0\b0\fs26\fsmilli13333 and 
\f1\b\fs24 Queue 
\f0\b0\fs26\fsmilli13333 classes? \uc0\u8232 because those abstract types are designed to only allow access to the top or edges of the collection\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	29.	}\expnd0\expndtw0\kerning0
Describe the order in which the range-based 
\f1\b\fs24 for 
\f0\b0\fs26\fsmilli13333 loop processes elements for \uc0\u8232 each of the collection classes introduced in this chapter. \u8232 Vector. Index: 0 to N-1\
\pard\tx720\pardeftab720\sa266\partightenfactor0
\cf2 	*Grid. Index: 0 to N-1 line, 0 to N-1 column\
\pard\tx720\pardeftab720\sa266\partightenfactor0
\cf2 	Map. Key: alphabetical\
	Stack (doesn\'92t apply)\
	Queue (doesn\'92t apply)\
	Set No order / in increasing order as defined by the value type\
	*Lexicon\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa266\partightenfactor0
\ls3\ilvl0\cf2 \
}